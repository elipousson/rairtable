% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/airtable_request.R
\name{airtable_request}
\alias{airtable_request}
\alias{req_query_airtable}
\alias{req_auth_airtable}
\title{Use httr2 to create an Airtable API request}
\usage{
airtable_request(
  url = NULL,
  base = NULL,
  table = NULL,
  airtable = NULL,
  ...,
  api_url = NULL,
  api_version = NULL,
  call = caller_env()
)

req_query_airtable(
  .req = NULL,
  ...,
  template = NULL,
  method = NULL,
  data = NULL,
  url = NULL,
  api_url = NULL,
  api_version = NULL,
  airtable = NULL,
  token = NULL,
  string = NULL,
  allow_key = TRUE,
  call = caller_env()
)

req_auth_airtable(
  req,
  token = NULL,
  default = "AIRTABLE_PAT",
  string = NULL,
  rate = 5/1,
  realm = NULL,
  allow_key = TRUE
)
}
\arguments{
\item{url}{A URL for an API call or an Airtable view. If url is provided and
is a valid URL, \code{\link[=airtable_request]{airtable_request()}} returns  \code{httr2::request(url)}. url
is optional if airtable \emph{or} base and table are supplied. If url is an
Airtable view, any additional base or table values provided are ignored. If
airtable is provided, any additional value provided to url is ignored. For
the metadata API (where only a base ID is required) include \code{require_base = TRUE} to pass to \code{\link[=check_airtable_api_url]{check_airtable_api_url()}} when creating a request.}

\item{base}{Airtable base id starting with with "app". Optional if url or
airtable are supplied. base and table are both required if url and airtable
are \code{NULL}.}

\item{table}{Airtable table id or name. If table is a table ID it is a string
starting with "viw".}

\item{airtable}{An airtable class object created with \code{\link[=airtable]{airtable()}}. airtable
must include a request_url attribute. url is ignored if airtable is
provided.  Optional if url or base \emph{and} table are supplied.}

\item{...}{
  Arguments passed on to \code{\link[=check_airtable_api_url]{check_airtable_api_url}}
  \describe{
    \item{\code{require_base}}{If \code{TRUE} (default), the string "app" must be included in
the supplied url.}
    \item{\code{require_table}}{If \code{TRUE}, the string "tbl" must be included in the
supplied url. If a string with a table name is provided, the string must be
part of the string supplied to url. If \code{FALSE} (default), there is no check
for a table being present in the URL.}
    \item{\code{require_view}}{If \code{TRUE}, the string "viw" must be included in the
string supplied to url. If \code{FALSE} (default), there is no check
for a view being present in the URL.}
  }}

\item{api_url}{Airtable API URL, If \code{NULL} (default), the api_url is set to
\code{getOption("rairtable.api_url", "https://api.airtable.com")}.}

\item{api_version}{Airtable API version number, If \code{NULL} (default), the
api_version is set to \verb{getOption("rairtable.api_version", 0))}.}

\item{call}{The execution environment of a currently
running function, e.g. \code{caller_env()}. The function will be
mentioned in error messages as the source of the error. See the
\code{call} argument of \code{\link[rlang:abort]{abort()}} for more information.}

\item{.req, req}{A request object created by \code{\link[httr2:request]{httr2::request()}} or
\code{\link[=airtable_request]{airtable_request()}}. If .req is provided to \code{\link[=req_query_airtable]{req_query_airtable()}}, url,
api_url, api_version, and airtable parameters are ignored. req is required
for \code{\link[=req_auth_airtable]{req_auth_airtable()}}.}

\item{template}{Template for query parameters passed to
\code{\link[httr2:req_template]{httr2::req_template()}}, Default: \code{NULL}.}

\item{method}{Custom HTTP method}

\item{data}{Data to include in body.}

\item{token}{Airtable personal access token, Defaults to \code{NULL} which is set
to environmental variable for "AIRTABLE_PAT" (from \code{\link[=get_airtable_pat]{get_airtable_pat()}}) or
"AIRTABLE_API_KEY" (from \code{\link[=get_airtable_api_key]{get_airtable_api_key()}}).}

\item{string}{Passed to \code{\link[httr2:req_user_agent]{httr2::req_user_agent()}}, Default: \code{NULL} (set to
\code{getOption("rairtable.useragent", default = "rairtable (https://github.com/matthewjrogers/rairtable)")})}

\item{allow_key}{If \code{TRUE}, allow use of an Airtable API key or an Airtable
personal access token (PAT) to authenticate the request. The metadata API
does not support the API key so allow_key is set to \code{FALSE} for any
functions that call that API.}

\item{default}{Default name for environmental variable for token.}

\item{rate}{Rate passed to \code{\link[httr2:req_throttle]{httr2::req_throttle()}}. Defaults to \code{5 / 1}.}

\item{realm}{Passed to \code{\link[httr2:req_throttle]{httr2::req_throttle()}}. Defaults to \code{NULL}.}
}
\value{
\code{\link[=airtable_request]{airtable_request()}} returns an HTTP response: an S3 list with class
httr2_request. Other functions return modified modified HTTP requests.
}
\description{
These functions are designed primarily for developers interested in
interacting directly with the Airtable API without using the airtable class
implemented in this package.
}
\details{
\code{\link[=airtable_request]{airtable_request()}} creates an initial request object based on an airtable
object, API url, Airtable view URL, or base and table IDs.

\code{\link[=req_auth_airtable]{req_auth_airtable()}} set the rate limit, user agent, and authenticates the
Airtable API request with an API key or personal access token.

\code{\link[=req_query_airtable]{req_query_airtable()}} builds an API request optionally using a template or
custom HTTP method (other than GET or POST). This function can create an
initial request using a URL or airtable object or use an existing request
object. The function also calls \code{\link[=req_auth_airtable]{req_auth_airtable()}} before returning the
request. Most of the other data access functions in this package wrap
\code{\link[=req_auth_airtable]{req_auth_airtable()}}.
}
